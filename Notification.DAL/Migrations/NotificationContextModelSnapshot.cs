// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notification.DAL.Data;

namespace Notification.DAL.Migrations
{
    [DbContext(typeof(NotificationContext))]
    partial class NotificationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Notification.DAL.Models.EventRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRecipient", "notification");
                });

            modelBuilder.Entity("Notification.DAL.Models.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EventNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Events", "notification");
                });

            modelBuilder.Entity("Notification.DAL.Models.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EventId");

                    b.ToTable("Notifications", "notification");
                });

            modelBuilder.Entity("Notification.DAL.Models.Templates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HeaderAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Templates", "notification");
                });

            modelBuilder.Entity("Notification.DAL.Models.UserNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications", "notification");
                });

            modelBuilder.Entity("Notification.DAL.Models.EventRecipient", b =>
                {
                    b.HasOne("Notification.DAL.Models.Events", "Event")
                        .WithMany("EventRecipient")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRecipient_Events")
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Notification.DAL.Models.Events", b =>
                {
                    b.HasOne("Notification.DAL.Models.Templates", "Template")
                        .WithMany("Events")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("FK_Events_Templates")
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Notification.DAL.Models.Notifications", b =>
                {
                    b.HasOne("Notification.DAL.Models.Events", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Notifications_Events")
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Notification.DAL.Models.UserNotifications", b =>
                {
                    b.HasOne("Notification.DAL.Models.Notifications", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_UserNotifications_Notifications")
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Notification.DAL.Models.Events", b =>
                {
                    b.Navigation("EventRecipient");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Notification.DAL.Models.Notifications", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Notification.DAL.Models.Templates", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
